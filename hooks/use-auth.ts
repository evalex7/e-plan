import createContextHook from '@nkzw/create-context-hook';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useCallback, useEffect, useState } from 'react';
import { ERROR_MESSAGES, getErrorMessage, logError } from '@/constants/error-messages';
import type { User, AuthState, UserRole, Permissions } from '@/types/business';


const STORAGE_KEYS = {
  USERS: 'users',
  CURRENT_USER: 'current_user',
  PASSWORDS: 'user_passwords' // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—ñ –æ–∫—Ä–µ–º–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
};

// –î–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–∞—Ä–æ–ª—ñ –¥–ª—è —Ä–æ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ü–µ –º–∞—î –±—É—Ç–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)
const DEFAULT_PASSWORDS: Record<string, string> = {
  'owner@company.com': 'owner2024',
  'admin@company.com': 'admin123',
  'manager@company.com': 'manager123'
};

// –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤ –≤–ª–∞—Å–Ω–∏–∫–∞
const OWNER_ACCESS_CODE = 'OWNER2024';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ
const getPermissionsForRole = (role: UserRole): Permissions => {
  switch (role) {
    case 'owner':
      return {
        canViewContracts: true,
        canEditContracts: true,
        canDeleteContracts: true,
        canViewAllEngineers: true,
        canEditEngineers: true,
        canDeleteEngineers: true,
        canViewReports: true,
        canCreateReports: true,
        canViewAnalytics: true,
        canManageUsers: true,
        canExportData: true,
        canImportData: true,
        canAdjustMaintenancePeriods: true
      };
    case 'admin':
      return {
        canViewContracts: true,
        canEditContracts: true,
        canDeleteContracts: true,
        canViewAllEngineers: true,
        canEditEngineers: true,
        canDeleteEngineers: true,
        canViewReports: true,
        canCreateReports: true,
        canViewAnalytics: true,
        canManageUsers: true,
        canExportData: true,
        canImportData: true,
        canAdjustMaintenancePeriods: true
      };
    case 'manager':
      return {
        canViewContracts: true,
        canEditContracts: true,
        canDeleteContracts: false,
        canViewAllEngineers: true,
        canEditEngineers: false,
        canDeleteEngineers: false,
        canViewReports: true,
        canCreateReports: false,
        canViewAnalytics: true,
        canManageUsers: false,
        canExportData: true,
        canImportData: false,
        canAdjustMaintenancePeriods: true
      };
    case 'engineer':
      return {
        canViewContracts: true,
        canEditContracts: false,
        canDeleteContracts: false,
        canViewAllEngineers: false,
        canEditEngineers: false,
        canDeleteEngineers: false,
        canViewReports: true,
        canCreateReports: true,
        canViewAnalytics: false,
        canManageUsers: false,
        canExportData: false,
        canImportData: false,
        canAdjustMaintenancePeriods: false
      };
    default:
      return {
        canViewContracts: false,
        canEditContracts: false,
        canDeleteContracts: false,
        canViewAllEngineers: false,
        canEditEngineers: false,
        canDeleteEngineers: false,
        canViewReports: false,
        canCreateReports: false,
        canViewAnalytics: false,
        canManageUsers: false,
        canExportData: false,
        canImportData: false,
        canAdjustMaintenancePeriods: false
      };
  }
};

export const [AuthProvider, useAuth] = createContextHook(() => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isAuthenticated: false,
    isLoading: true
  });
  const [users, setUsers] = useState<User[]>([]);
  const [passwords, setPasswords] = useState<Record<string, string>>({});
  
  // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —ñ–Ω–∂–µ–Ω–µ—Ä–∞–º–∏
  // const { engineers } = useBusinessData();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  useEffect(() => {
    loadAuthData();
  }, []);

  // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —ñ–Ω–∂–µ–Ω–µ—Ä–∞–º–∏
  // useEffect(() => {
  //   if (engineers.length > 0) {
  //     syncUsersWithEngineers();
  //   }
  // }, [engineers]);

  const loadAuthData = async () => {
    try {
      console.log('üîê Starting auth data load...');
      setAuthState(prev => ({ ...prev, isLoading: true }));
      
      // –°–ø–æ—á–∞—Ç–∫—É —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const currentUserData = await AsyncStorage.getItem(STORAGE_KEYS.CURRENT_USER);
      
      if (currentUserData) {
        try {
          const currentUser = JSON.parse(currentUserData);
          // –®–≤–∏–¥–∫–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          setAuthState({
            user: currentUser,
            isAuthenticated: true,
            isLoading: false
          });
          console.log('üîê Quick auth successful for:', currentUser.name);
        } catch (error) {
          console.error('üîê Error parsing current user data:', error);
          await AsyncStorage.removeItem(STORAGE_KEYS.CURRENT_USER);
        }
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—à—Ç—É –¥–∞–Ω–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      const [usersData, passwordsData] = await Promise.all([
        AsyncStorage.getItem(STORAGE_KEYS.USERS),
        AsyncStorage.getItem(STORAGE_KEYS.PASSWORDS)
      ]);
      
      console.log('üîê AsyncStorage data loaded');

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      let loadedUsers: User[] = [];
      if (usersData) {
        try {
          loadedUsers = JSON.parse(usersData);
        } catch (error) {
          console.error('Error parsing users data:', error);
          await AsyncStorage.removeItem(STORAGE_KEYS.USERS);
        }
      }

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∞—Ä–æ–ª—ñ
      let loadedPasswords: Record<string, string> = { ...DEFAULT_PASSWORDS };
      if (passwordsData) {
        try {
          const parsed = JSON.parse(passwordsData);
          loadedPasswords = { ...loadedPasswords, ...parsed };
        } catch (error) {
          console.error('Error parsing passwords data:', error);
          await AsyncStorage.removeItem(STORAGE_KEYS.PASSWORDS);
        }
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö
      if (loadedUsers.length === 0) {
        console.log('üîê Creating default users...');
        loadedUsers = await createDefaultUsers();
      }

      console.log('üîê Setting users and passwords...');
      setUsers(loadedUsers);
      setPasswords(loadedPasswords);

      // –Ø–∫—â–æ –Ω–µ –±—É–ª–æ —à–≤–∏–¥–∫–æ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
      if (!currentUserData) {
        setAuthState({
          user: null,
          isAuthenticated: false,
          isLoading: false
        });
      }
      
      console.log('üîê Auth data load completed successfully');
    } catch (error) {
      console.error('üîê Error loading auth data:', error);
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, —â–æ–± –¥–æ–¥–∞—Ç–æ–∫ –º—ñ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
      setAuthState({
        user: null,
        isAuthenticated: false,
        isLoading: false
      });
      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      try {
        const defaultUsers = await createDefaultUsers();
        setUsers(defaultUsers);
        setPasswords(DEFAULT_PASSWORDS);
        console.log('üîê Default users created after error');
      } catch (createError) {
        console.error('üîê Failed to create default users:', createError);
      }
    }
  };

  const createDefaultUsers = async (): Promise<User[]> => {
    const defaultUsers: User[] = [
      {
        id: '0',
        email: 'owner@company.com',
        name: '–í–ª–∞—Å–Ω–∏–∫ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É',
        role: 'owner',
        isActive: true,
        createdAt: new Date().toISOString()
      },
      {
        id: '1',
        email: 'admin@company.com',
        name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'admin',
        isActive: true,
        createdAt: new Date().toISOString()
      },
      {
        id: '2',
        email: 'manager@company.com',
        name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        role: 'manager',
        isActive: true,
        createdAt: new Date().toISOString()
      }
    ];

    await AsyncStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(defaultUsers));
    await AsyncStorage.setItem(STORAGE_KEYS.PASSWORDS, JSON.stringify(DEFAULT_PASSWORDS));
    
    return defaultUsers;
  };

  // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —ñ–Ω–∂–µ–Ω–µ—Ä–∞–º–∏
  // const syncUsersWithEngineers = async () => {
  //   console.log('üîê Syncing users with engineers');
  //   // ... –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
  // };

  const login = async (email: string, password: string): Promise<{ success: boolean; error?: string }> => {
    try {
      console.log('üîê Login attempt for:', email);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–¥ –≤–ª–∞—Å–Ω–∏–∫–∞
      if (password === OWNER_ACCESS_CODE) {
        const ownerUser = users.find(u => u.role === 'owner' && u.isActive);
        if (ownerUser) {
          console.log('üîê Owner access granted with special code');
          
          const updatedUser = {
            ...ownerUser,
            lastLogin: new Date().toISOString()
          };

          const updatedUsers = users.map(u => u.id === ownerUser.id ? updatedUser : u);
          setUsers(updatedUsers);
          await AsyncStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(updatedUsers));
          await AsyncStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(updatedUser));
          
          setAuthState({
            user: updatedUser,
            isAuthenticated: true,
            isLoading: false
          });

          return { success: true };
        }
      }
      
      const user = users.find(u => u.email.toLowerCase() === email.toLowerCase() && u.isActive);
      if (!user) {
        return { success: false, error: ERROR_MESSAGES.USER_NOT_FOUND };
      }

      const storedPassword = passwords[user.email];
      if (!storedPassword || storedPassword !== password) {
        return { success: false, error: ERROR_MESSAGES.INVALID_PASSWORD };
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É
      const updatedUser = {
        ...user,
        lastLogin: new Date().toISOString()
      };

      const updatedUsers = users.map(u => u.id === user.id ? updatedUser : u);
      setUsers(updatedUsers);
      await AsyncStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(updatedUsers));

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await AsyncStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(updatedUser));
      
      setAuthState({
        user: updatedUser,
        isAuthenticated: true,
        isLoading: false
      });

      console.log('üîê Login successful for:', user.name, 'Role:', user.role);
      return { success: true };
    } catch (error) {
      logError(error, 'login');
      return { success: false, error: getErrorMessage(error) };
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem(STORAGE_KEYS.CURRENT_USER);
      setAuthState({
        user: null,
        isAuthenticated: false,
        isLoading: false
      });
      console.log('üîê Logout successful');
    } catch (error) {
      logError(error, 'logout');
    }
  };

  const changePassword = async (email: string, newPassword: string): Promise<boolean> => {
    try {
      const updatedPasswords = {
        ...passwords,
        [email]: newPassword
      };
      
      setPasswords(updatedPasswords);
      await AsyncStorage.setItem(STORAGE_KEYS.PASSWORDS, JSON.stringify(updatedPasswords));
      
      console.log('üîê Password changed for:', email);
      return true;
    } catch (error) {
      logError(error, 'changePassword');
      return false;
    }
  };

  const createUser = async (userData: Omit<User, 'id' | 'createdAt'>, password: string): Promise<User> => {
    const newUser: User = {
      ...userData,
      id: Date.now().toString(),
      createdAt: new Date().toISOString()
    };

    const updatedUsers = [...users, newUser];
    const updatedPasswords = {
      ...passwords,
      [newUser.email]: password
    };

    setUsers(updatedUsers);
    setPasswords(updatedPasswords);

    await AsyncStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(updatedUsers));
    await AsyncStorage.setItem(STORAGE_KEYS.PASSWORDS, JSON.stringify(updatedPasswords));

    return newUser;
  };

  const updateUser = async (userId: string, updates: Partial<User>): Promise<boolean> => {
    try {
      const updatedUsers = users.map(u => u.id === userId ? { ...u, ...updates } : u);
      setUsers(updatedUsers);
      await AsyncStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(updatedUsers));
      
      // –Ø–∫—â–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —ñ —Å—Ç–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      if (authState.user?.id === userId) {
        const updatedCurrentUser = { ...authState.user, ...updates };
        setAuthState(prev => ({ ...prev, user: updatedCurrentUser }));
        await AsyncStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(updatedCurrentUser));
      }
      
      return true;
    } catch (error) {
      logError(error, 'updateUser');
      return false;
    }
  };

  const getPermissions = useCallback((role?: UserRole): Permissions => {
    if (!role) return getPermissionsForRole('engineer');
    return getPermissionsForRole(role);
  }, []);

  const getUserPermissions = useCallback((): Permissions => {
    return getPermissions(authState.user?.role);
  }, [authState.user?.role, getPermissions]);

  return {
    ...authState,
    users,
    permissions: getUserPermissions(),
    login,
    logout,
    changePassword,
    createUser,
    updateUser,
    getPermissions,
    refreshAuth: loadAuthData,
    OWNER_ACCESS_CODE // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ UI
  };
});