import React, { useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Platform,
  Share
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { 
  ArrowLeft, 
  Download, 
  Upload, 
  Database, 
  FileText, 
  Users, 
  Building2,
  AlertTriangle,
  RefreshCw
} from 'lucide-react-native';
import { router } from 'expo-router';
import { useBusinessData } from '@/hooks/use-business-data';
import { colors, spacing, borderRadius, fontSize, fontWeight } from '@/constants/colors';
import * as Clipboard from 'expo-clipboard';

export default function SyncDataScreen() {
  const { 
    contracts, 
    objects, 
    engineers, 
    tasks, 
    reports,
    exportData, 
    exportSelectedData,
    importData,
    resetData,
    regenerateAllTasks
  } = useBusinessData();
  
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);

  const handleExportAll = async () => {
    try {
      setIsExporting(true);
      const data = await exportData();
      
      if (Platform.OS === 'web') {
        // –ù–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `backup-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log('–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ —Ñ–∞–π–ª');
      } else {
        // –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –ø–æ–∫–∞–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        console.log('–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        copyToClipboard(data);
      }
    } catch (error) {
      console.error('Export error:', error);
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const handleExportContracts = async () => {
    try {
      setIsExporting(true);
      const data = await exportSelectedData(['contracts']);
      
      if (Platform.OS === 'web') {
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `contracts-backup-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log('–î–æ–≥–æ–≤–æ—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ —Ñ–∞–π–ª');
      } else {
        console.log('–ï–∫—Å–ø–æ—Ä—Ç –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        copyToClipboard(data);
      }
    } catch (error) {
      console.error('Export contracts error:', error);
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∏:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const handleExportEngineers = async () => {
    try {
      setIsExporting(true);
      const data = await exportSelectedData(['engineers']);
      
      if (Platform.OS === 'web') {
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `engineers-backup-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log('–Ü–Ω–∂–µ–Ω–µ—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ —Ñ–∞–π–ª');
      } else {
        console.log('–ï–∫—Å–ø–æ—Ä—Ç —ñ–Ω–∂–µ–Ω–µ—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        copyToClipboard(data);
      }
    } catch (error) {
      console.error('Export engineers error:', error);
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ–≤:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const copyToClipboard = async (data: string) => {
    try {
      if (!data || !data.trim()) {
        console.error('–î–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ');
        return;
      }
      
      if (data.length > 1000000) {
        console.error('–î–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è');
        return;
      }
      
      const sanitizedData = data.trim();
      await Clipboard.setStringAsync(sanitizedData);
      console.log('–î–∞–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
    } catch (error) {
      console.error('Copy error:', error);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–ø–æ–∫–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
  const shareData = async (data: string) => {
    try {
      if (Platform.OS !== 'web') {
        await Share.share({
          message: data,
          title: '–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –¥–∞–Ω–∏—Ö'
        });
      }
    } catch (error) {
      console.error('Share error:', error);
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –¥–∞–Ω–∏–º–∏');
    }
  };
  
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ shareData –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
  console.log('shareData function available:', typeof shareData);

  const handleImportFromClipboard = async () => {
    try {
      setIsImporting(true);
      const clipboardData = await Clipboard.getStringAsync();
      
      if (!clipboardData) {
        console.error('–ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ø–æ—Ä–æ–∂–Ω—ñ–π');
        return;
      }

      console.log('üì• Starting import process...');
      await importData(clipboardData);
      
      // –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
      console.log('üì• Forcing data reload after import...');
      await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
      
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ AsyncStorage
      window.location?.reload?.(); // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å—ñ—ó
      
      console.log('üì• –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É');
    } catch (error) {
      console.error('Import error:', error);
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ:', error);
    } finally {
      setIsImporting(false);
    }
  };

  const handleRegenerateTasks = async () => {
    try {
      setIsImporting(true);
      console.log('üîÑ Starting task regeneration...');
      const result = await regenerateAllTasks();
      console.log(`‚úÖ Regenerated ${result.tasks.length} tasks and ${result.kanbanTasks.length} kanban entries`);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      if (Platform.OS === 'web') {
        alert(`–£—Å–ø—ñ—à–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${result.tasks.length} –∑–∞–≤–¥–∞–Ω—å –¢–û!`);
      }
    } catch (error) {
      console.error('‚ùå Task regeneration failed:', error);
    } finally {
      setIsImporting(false);
    }
  };

  const handleResetData = async () => {
    try {
      await resetData();
      console.log('–í—Å—ñ –¥–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ');
      router.back();
    } catch {
      console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –¥–∞–Ω—ñ');
    }
  };

  const getDataStats = () => {
    return {
      contracts: contracts.length,
      objects: objects.length,
      engineers: engineers.length,
      tasks: tasks.length,
      reports: reports.length
    };
  };

  const stats = getDataStats();

  return (
    <View style={styles.container}>
      <SafeAreaView style={styles.safeArea} edges={['top']}>
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <ArrowLeft size={24} color={colors.gray700} />
          </TouchableOpacity>
          <Text style={styles.title}>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏</Text>
        </View>

        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ</Text>
            <View style={styles.statsContainer}>
              <View style={styles.statItem}>
                <Building2 size={20} color={colors.primary} />
                <Text style={styles.statNumber}>{stats.contracts}</Text>
                <Text style={styles.statLabel}>–î–æ–≥–æ–≤–æ—Ä–∏</Text>
              </View>
              <View style={styles.statItem}>
                <Database size={20} color={colors.success} />
                <Text style={styles.statNumber}>{stats.objects}</Text>
                <Text style={styles.statLabel}>–û–±&apos;—î–∫—Ç–∏</Text>
              </View>
              <View style={styles.statItem}>
                <Users size={20} color={colors.warning} />
                <Text style={styles.statNumber}>{stats.engineers}</Text>
                <Text style={styles.statLabel}>–Ü–Ω–∂–µ–Ω–µ—Ä–∏</Text>
              </View>
              <View style={styles.statItem}>
                <FileText size={20} color={colors.info} />
                <Text style={styles.statNumber}>{stats.tasks}</Text>
                <Text style={styles.statLabel}>–ó–∞–¥–∞—á—ñ</Text>
              </View>
            </View>
          </View>

          {/* –ï–∫—Å–ø–æ—Ä—Ç */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</Text>
            <Text style={styles.sectionDescription}>
              –°—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–∞ —ñ–Ω—à–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
            </Text>
            
            <TouchableOpacity 
              style={[styles.actionButton, styles.exportButton]}
              onPress={handleExportAll}
              disabled={isExporting}
            >
              {isExporting ? (
                <ActivityIndicator size="small" color={colors.white} />
              ) : (
                <Download size={20} color={colors.white} />
              )}
              <Text style={styles.actionButtonText}>
                {isExporting ? '–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...' : '–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ'}
              </Text>
            </TouchableOpacity>

            <View style={styles.selectiveExportContainer}>
              <Text style={styles.selectiveExportTitle}>–°–µ–ª–µ–∫—Ç–∏–≤–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç:</Text>
              <View style={styles.selectiveExportButtons}>
                <TouchableOpacity 
                  style={[styles.selectiveButton, styles.contractsButton]}
                  onPress={handleExportContracts}
                  disabled={isExporting}
                >
                  <Building2 size={16} color={colors.white} />
                  <Text style={styles.selectiveButtonText}>–î–æ–≥–æ–≤–æ—Ä–∏</Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  style={[styles.selectiveButton, styles.engineersButton]}
                  onPress={handleExportEngineers}
                  disabled={isExporting}
                >
                  <Users size={16} color={colors.white} />
                  <Text style={styles.selectiveButtonText}>–Ü–Ω–∂–µ–Ω–µ—Ä–∏</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>

          {/* –Ü–º–ø–æ—Ä—Ç */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>–Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</Text>
            <Text style={styles.sectionDescription}>
              –í—ñ–¥–Ω–æ–≤—ñ—Ç—å –¥–∞–Ω—ñ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó. –°–∫–æ–ø—ñ—é–π—Ç–µ JSON –¥–∞–Ω—ñ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ
            </Text>
            
            <TouchableOpacity 
              style={[styles.actionButton, styles.importButton]}
              onPress={handleImportFromClipboard}
              disabled={isImporting}
            >
              {isImporting ? (
                <ActivityIndicator size="small" color={colors.white} />
              ) : (
                <Upload size={20} color={colors.white} />
              )}
              <Text style={styles.actionButtonText}>
                {isImporting ? '–Ü–º–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...' : '–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É'}
              </Text>
            </TouchableOpacity>

            <View style={styles.warningContainer}>
              <AlertTriangle size={16} color={colors.warning} />
              <Text style={styles.warningText}>
                –Ü–º–ø–æ—Ä—Ç –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º.
              </Text>
            </View>
          </View>

          {/* –†–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º</Text>
            <Text style={styles.sectionDescription}>
              –Ø–∫—â–æ –¢–û –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –Ω–∞ –ª—ñ–Ω—ñ—ó —á–∞—Å—É –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∑–∞–≤–¥–∞–Ω—å
            </Text>
            
            <TouchableOpacity 
              style={[styles.actionButton, styles.regenerateButton]}
              onPress={handleRegenerateTasks}
              disabled={isImporting || isExporting}
            >
              <RefreshCw size={20} color={colors.white} />
              <Text style={styles.actionButtonText}>–†–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¢–û</Text>
            </TouchableOpacity>
          </View>

          {/* –°–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>–°–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö</Text>
            <Text style={styles.sectionDescription}>
              –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
            </Text>
            
            <TouchableOpacity 
              style={[styles.actionButton, styles.resetButton]}
              onPress={handleResetData}
            >
              <AlertTriangle size={20} color={colors.white} />
              <Text style={styles.actionButtonText}>–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ</Text>
            </TouchableOpacity>
          </View>

          {/* –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ */}
          {Platform.OS !== 'web' && (
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó</Text>
              <View style={styles.instructionContainer}>
                <View style={styles.instructionStep}>
                  <View style={styles.stepNumber}>
                    <Text style={styles.stepNumberText}>1</Text>
                  </View>
                  <Text style={styles.instructionText}>
                    –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å &quot;–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ&quot; —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å &quot;–ö–æ–ø—ñ—é–≤–∞—Ç–∏&quot; –∞–±–æ &quot;–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è&quot;
                  </Text>
                </View>
                
                <View style={styles.instructionStep}>
                  <View style={styles.stepNumber}>
                    <Text style={styles.stepNumberText}>2</Text>
                  </View>
                  <Text style={styles.instructionText}>
                    –ó–±–µ—Ä–µ–∂—ñ—Ç—å –¥–∞–Ω—ñ –≤ –Ω–∞–¥—ñ–π–Ω–æ–º—É –º—ñ—Å—Ü—ñ (—Ö–º–∞—Ä–Ω–µ —Å—Ö–æ–≤–∏—â–µ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–æ–±—ñ —Ç–æ—â–æ)
                  </Text>
                </View>
                
                <View style={styles.instructionStep}>
                  <View style={styles.stepNumber}>
                    <Text style={styles.stepNumberText}>3</Text>
                  </View>
                  <Text style={styles.instructionText}>
                    –î–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è: —Å–∫–æ–ø—ñ—é–π—Ç–µ –¥–∞–Ω—ñ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å &quot;–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É&quot;
                  </Text>
                </View>
              </View>
            </View>
          )}
        </ScrollView>
      </SafeAreaView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.gray50,
  },
  safeArea: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: spacing.xl,
    paddingVertical: spacing.lg,
    backgroundColor: colors.white,
    borderBottomWidth: 1,
    borderBottomColor: colors.gray200,
    gap: spacing.lg,
  },
  backButton: {
    padding: spacing.sm,
    borderRadius: borderRadius.md,
    backgroundColor: colors.gray100,
  },
  title: {
    fontSize: fontSize.xl,
    fontWeight: fontWeight.semibold,
    color: colors.gray900,
  },
  content: {
    flex: 1,
    padding: spacing.xl,
  },
  section: {
    backgroundColor: colors.white,
    borderRadius: borderRadius.xl,
    padding: spacing.xl,
    marginBottom: spacing.lg,
    shadowColor: colors.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  sectionTitle: {
    fontSize: fontSize.lg,
    fontWeight: fontWeight.semibold,
    color: colors.gray900,
    marginBottom: spacing.sm,
  },
  sectionDescription: {
    fontSize: fontSize.sm,
    color: colors.gray600,
    marginBottom: spacing.lg,
    lineHeight: 20,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    gap: spacing.md,
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
    minWidth: 80,
    padding: spacing.md,
    backgroundColor: colors.gray50,
    borderRadius: borderRadius.lg,
  },
  statNumber: {
    fontSize: fontSize.xl,
    fontWeight: fontWeight.bold,
    color: colors.gray900,
    marginTop: spacing.xs,
  },
  statLabel: {
    fontSize: fontSize.xs,
    color: colors.gray600,
    marginTop: spacing.xs,
    textAlign: 'center',
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: spacing.lg,
    paddingHorizontal: spacing.xl,
    borderRadius: borderRadius.lg,
    gap: spacing.sm,
    shadowColor: colors.black,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 4,
  },
  actionButtonText: {
    fontSize: fontSize.base,
    fontWeight: fontWeight.semibold,
    color: colors.white,
  },
  exportButton: {
    backgroundColor: colors.primary,
  },
  importButton: {
    backgroundColor: colors.success,
  },
  resetButton: {
    backgroundColor: colors.error,
  },
  regenerateButton: {
    backgroundColor: '#8B5CF6',
  },
  selectiveExportContainer: {
    marginTop: spacing.lg,
    paddingTop: spacing.lg,
    borderTopWidth: 1,
    borderTopColor: colors.gray200,
  },
  selectiveExportTitle: {
    fontSize: fontSize.sm,
    fontWeight: fontWeight.medium,
    color: colors.gray700,
    marginBottom: spacing.md,
  },
  selectiveExportButtons: {
    flexDirection: 'row',
    gap: spacing.md,
  },
  selectiveButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: spacing.md,
    paddingHorizontal: spacing.lg,
    borderRadius: borderRadius.md,
    gap: spacing.sm,
  },
  selectiveButtonText: {
    fontSize: fontSize.sm,
    fontWeight: fontWeight.medium,
    color: colors.white,
  },
  contractsButton: {
    backgroundColor: colors.primary,
  },
  engineersButton: {
    backgroundColor: colors.warning,
  },
  warningContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: spacing.sm,
    marginTop: spacing.lg,
    padding: spacing.md,
    backgroundColor: colors.warning + '10',
    borderRadius: borderRadius.md,
    borderLeftWidth: 4,
    borderLeftColor: colors.warning,
  },
  warningText: {
    flex: 1,
    fontSize: fontSize.sm,
    color: colors.warning,
    lineHeight: 18,
  },
  instructionContainer: {
    gap: spacing.lg,
  },
  instructionStep: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: spacing.md,
  },
  stepNumber: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: colors.primary,
    alignItems: 'center',
    justifyContent: 'center',
  },
  stepNumberText: {
    fontSize: fontSize.sm,
    fontWeight: fontWeight.semibold,
    color: colors.white,
  },
  instructionText: {
    flex: 1,
    fontSize: fontSize.sm,
    color: colors.gray700,
    lineHeight: 20,
  },
});